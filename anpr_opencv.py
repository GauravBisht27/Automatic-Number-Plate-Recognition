# -*- coding: utf-8 -*-
"""ANPR-OPENCV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TTNxi0EATD5AgR6ng_727GR4QQNcG4uh
"""

from google.colab import drive
drive.mount('/content/drive')

import cv2
from google.colab.patches import cv2_imshow

from matplotlib import pyplot as plt
import numpy as np
import pandas as pd

import imutils

!pip install easyocr
import easyocr

!pip install pytesseract
import pytesseract

print(cv2.__version__)

print(np.__version__)

print(pd.__version__)

print(imutils.__version__)

print(pytesseract.__version__)

print(easyocr.__version__)

img1 = cv2.imread("/content/drive/MyDrive/Number Plates/bmw-70-plate.jpg")
img2 = cv2.imread("/content/drive/MyDrive/Number Plates/customer-images-for-site2.png")
img3 = cv2.imread("/content/drive/MyDrive/Number Plates/a7sp8ji_high-security-number-plates_625x300_12_October_18 (1).webp")
img4 = cv2.imread("/content/drive/MyDrive/Number Plates/MicroCAMBrazilpolice-1.jpg")
img5 = cv2.imread("/content/drive/MyDrive/Number Plates/customer-images-for-site6.png")

img = cv2.resize(img1, (780, 540))
print(img)
cv2_imshow(img)
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
print(gray)
cv2_imshow(gray)
plt.imshow(cv2.cvtColor(gray, cv2.COLOR_BGR2RGB))

# Bilateral Filtering (Highly Effective in removing noices while keeping edges sharp)
# Slower than other Filters
filter1 = cv2.bilateralFilter(gray, 9, 75, 75)
print(filter1)
cv2_imshow(filter1)

# Canny Edge Detection
edge1 = cv2.Canny(filter1, 30, 200) 
plt.imshow(cv2.cvtColor(edge1, cv2.COLOR_BGR2RGB))

#Applying Gaussian Blur
filter2 = cv2.GaussianBlur(gray, (5, 5), 0)
print(filter2)
cv2_imshow(filter2)

# Canny Edge Detection
edge2 = cv2.Canny(filter2, 100, 200)
plt.imshow(cv2.cvtColor(edge2, cv2.COLOR_BGR2RGB))

# Median Blur (Reduces Noice Effectively)
filter3 = cv2.medianBlur(gray, 1)
print(filter3)
cv2_imshow(filter3)

# Canny Edge Detection
edge3 = cv2.Canny(filter3, 100, 200)
plt.imshow(cv2.cvtColor(edge3, cv2.COLOR_BGR2RGB))

# Sobel Edge Detection (For Gaussian Blur)

sobelx1 = cv2.Sobel(src=filter1, ddepth=cv2.CV_64F, dx=1, dy=0, ksize=5) # Sobel Edge Detection on the X axis
sobely1 = cv2.Sobel(src=filter1, ddepth=cv2.CV_64F, dx=0, dy=1, ksize=5) # Sobel Edge Detection on the Y axis
sobelxy1 = cv2.Sobel(src=filter1, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=5) # Combined X and Y Sobel Edge Detection

cv2_imshow(sobelx1)
cv2_imshow(sobely1)
cv2_imshow(sobelxy1)
#cv2.waitKey(0)
#cv2.destroyAllWindows()

# Using Small Square Kernel
# Otsu Method
squareKern = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
filter4 = cv2.morphologyEx(gray, cv2.MORPH_CLOSE, squareKern)
filter4 = cv2.threshold(filter4, 0, 255,cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
print(filter4)
cv2_imshow(filter4)

# Canny Edge Detection
edge4 = cv2.Canny(filter4, 100, 200)
plt.imshow(cv2.cvtColor(edge4, cv2.COLOR_BGR2RGB))

#  Finds the contours in a binary image and stores it as a numpy array of coordinate points
keypoints = cv2.findContours(edge2.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
contours = imutils.grab_contours(keypoints)
contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]
print(contours)
print(len(contours))

location = None
for contour in contours:
    approx = cv2.approxPolyDP(contour, 10, True)
    if len(approx) == 4:
      location = approx 
      break
print(location)

# After finding the contours and storing the coordinate points (x, y)of the contour line in an array
# we can use these points to draw the contour lines on the image
mask = np.zeros(gray.shape, np.uint8)
new_image = cv2.drawContours(mask, [location], 0,255, -1)
new_image = cv2.bitwise_and(img, img, mask=mask)
print(new_image)
cv2_imshow(new_image)

plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_BGR2RGB))

# Crop the image
# Marking the axis of number to get image of only number plate
(x,y) = np.where(mask==255)
(x1, y1) = (np.min(x), np.min(y))
(x2, y2) = (np.max(x), np.max(y))
cropped_image = gray[x1:x2+1, y1:y2+1]
print(cropped_image)
cv2_imshow(cropped_image)
plt.imshow(cv2.cvtColor(cropped_image, cv2.COLOR_BGR2RGB))

# EasyOCR to read text
reader = easyocr.Reader(['en'])
result = reader.readtext(cropped_image)
print(result)

# Printing Number Plate
print(result[-1][-2])

text = result[-1][-2]
print(text)
font = cv2.FONT_HERSHEY_SIMPLEX
res = cv2.putText(img, text=text, org=(approx[0][0][0], approx[1][0][1]+60), fontFace=font, fontScale=1, color=(0,255,0), thickness=2, lineType=cv2.LINE_AA)
res = cv2.rectangle(img, tuple(approx[0][0]), tuple(approx[2][0]), (0,255,0),3)
print(res)
plt.imshow(cv2.cvtColor(res, cv2.COLOR_BGR2RGB))

cv2_imshow(res)